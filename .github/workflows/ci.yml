name: ci

on:
  push:
    paths-ignore:
      - 'guides/**'

permissions: read-all

jobs:
  ci:
    env:
      MIX_ENV: test

    strategy:
      fail-fast: false
      matrix:
        include:
          - pair:
              elixir: '1.18.3-otp-27'
              otp: '27.3.1'

    runs-on: ubuntu-24.04


    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres # The PostgreSQL user (useful to connect to the database)
          POSTGRES_PASSWORD: postgres # The PostgreSQL password (useful to connect to the database)
          POSTGRES_DB: basenji_dev # The PostgreSQL default database (automatically created at first launch)

    steps:

      - name: Install unrar, optipng, jpegoptim
        run: sudo apt install -y unrar optipng jpegoptim

      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@002fdce3c6a235733a90a27c80493a3241e56863 # v2.12.1
        with:
          egress-policy: audit

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: erlef/setup-beam@75edbb82877ab10edeb12a99c3cf2f0909f3dc87 # v1.20.1
        with:
          otp-version: ${{matrix.pair.otp}}
          elixir-version: ${{matrix.pair.elixir}}

      - uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{matrix.pair.elixir}}-${{matrix.pair.otp}}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{matrix.pair.elixir}}-${{matrix.pair.otp}}-

      - name: Run mix deps.get
        run: mix deps.get --only test

      - name: Run mix format
        run: mix format --check-formatted

#      - name: Run mix deps.unlock
#        run: mix deps.unlock --check-unused

      - name: Run mix deps.compile
        run: mix deps.compile

      - name: Run mix compile
        run: mix compile --warnings-as-errors

      - name: Run credo
        run: mix credo --strict

      - name: Run tests
        run: mix coveralls.github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

   # Cache key based on Erlang/Elixir version and the mix.lock hash
  - name: Restore PLT cache
    id: plt_cache
    uses: actions/cache/restore@v3
    with:
      key: |
        plt-${{ runner.os }}-${{ steps.beam.outputs.otp-version }}-${{ steps.beam.outputs.elixir-version }}-${{ hashFiles('**/mix.lock') }}
      restore-keys: |
        plt-${{ runner.os }}-${{ steps.beam.outputs.otp-version }}-${{ steps.beam.outputs.elixir-version }}-
      path: |
        priv/plts

  # Create PLTs if no cache was found
  - name: Create PLTs
    if: steps.plt_cache.outputs.cache-hit != 'true'
    run: mix dialyzer --plt

  # By default, the GitHub Cache action will only save the cache if all steps in the job succeed,
  # so we separate the cache restore and save steps in case running dialyzer fails.
  - name: Save PLT cache
    id: plt_cache_save
    uses: actions/cache/save@v3
    if: steps.plt_cache.outputs.cache-hit != 'true'
    with:
      key: |
        plt-${{ runner.os }}-${{ steps.beam.outputs.otp-version }}-${{ steps.beam.outputs.elixir-version }}-${{ hashFiles('**/mix.lock') }}
      path: |
        priv/plts

  - name: Run dialyzer
    # Two formats are included for ease of debugging and it is lightly recommended to use both, see https://github.com/jeremyjh/dialyxir/issues/530 for reasoning
    # --format github is helpful to print the warnings in a way that GitHub understands and can place on the /files page of a PR
    # --format dialyxir allows the raw GitHub actions logs to be useful because they have the full warning printed
    run: mix dialyzer --format github --format dialyxir
